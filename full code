import React, { useEffect, useMemo, useRef, useState } from "react";
import { motion } from "framer-motion";
import {
  ShieldCheck,
  BellRing,
  MessagesSquare,
  LogIn,
  ArrowRight,
  CreditCard,
  Building2,
  Sparkles,
  CheckCircle2,
  Loader2,
  Cog,
} from "lucide-react";

/*
  âš  IMPORTANT NOTE
  ------------------
  This is a Brex-inspired demo app with original UI, not an exact copy and not using any Brex IP.
  It showcases:
    â€¢ Email+password -> OTP (2FA) flow (client-side demo)
    â€¢ Customer support: raise-a-ticket form with tracking ID
    â€¢ Customizable push/in-app notifications builder

  Tech:
    â€¢ React + TailwindCSS (assumed available in your environment)
    â€¢ Framer Motion for tasteful animations
    â€¢ Lucide icons

  How to use (in ChatGPT canvas or your React app):
    1) Make sure Tailwind is configured. If not, you can still run; styles may differ.
    2) This is a single-file component. Export default and render in your app.

  Demo creds:
    username: demo@company.com
    password: demo123
    OTP: 123456
*/

// ---- Utility UI bits (minimal shadcn-like primitives implemented inline) ----
const Button = ({ className = "", children, as: Tag = "button", ...props }) => (
  <Tag
    className={inline-flex items-center gap-2 rounded-2xl px-4 py-2 shadow-sm hover:shadow md:active:scale-[0.98] transition border border-black/5 bg-white ${className}}
    {...props}
  >
    {children}
  </Tag>
);

const Input = ({ className = "", ...props }) => (
  <input
    className={w-full rounded-2xl border border-black/10 bg-white px-4 py-2 outline-none focus:ring-2 focus:ring-black/10 ${className}}
    {...props}
  />
);

const Textarea = ({ className = "", ...props }) => (
  <textarea
    className={w-full rounded-2xl border border-black/10 bg-white px-4 py-2 outline-none focus:ring-2 focus:ring-black/10 ${className}}
    {...props}
  />
);

const Card = ({ className = "", children }) => (
  <div className={rounded-3xl border border-black/10 bg-white p-5 shadow-sm ${className}}>{children}</div>
);

// ---- Simple toast system ----
function useToasts() {
  const [toasts, setToasts] = useState([]);
  const add = (title, desc) => {
    const id = Math.random().toString(36).slice(2, 9);
    setToasts((t) => [...t, { id, title, desc }]);
    setTimeout(() => setToasts((t) => t.filter((x) => x.id !== id)), 3500);
  };
  return { toasts, add };
}

const Toasts = ({ toasts }) => (
  <div className="pointer-events-none fixed right-4 top-4 z-[999] flex w-[min(420px,90vw)] flex-col gap-3">
    {toasts.map((t) => (
      <motion.div
        key={t.id}
        initial={{ opacity: 0, y: -8 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0 }}
        className="pointer-events-auto rounded-2xl border border-black/10 bg-white p-4 shadow-lg"
      >
        <div className="font-medium">{t.title}</div>
        {t.desc && <div className="text-sm text-black/60">{t.desc}</div>}
      </motion.div>
    ))}
  </div>
);

// ---- Fake API (client-side) ----
const demoUser = { email: "demo@company.com", password: "demo123", otp: "123456" };

function fakeLogin(email, password) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (email === demoUser.email && password === demoUser.password) resolve({ ok: true });
      else reject(new Error("Invalid credentials"));
    }, 650);
  });
}

function fakeSendOtp(email) {
  return new Promise((resolve) => setTimeout(() => resolve({ ok: true, hint: "â€¢â€¢â€¢456" }), 500));
}

function fakeVerifyOtp(otp) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (otp === demoUser.otp) resolve({ ok: true, token: "fake-jwt-token" });
      else reject(new Error("Incorrect code"));
    }, 500);
  });
}

function fakeCreateTicket(payload) {
  return new Promise((resolve) => {
    const id = Math.floor(100000 + Math.random() * 900000).toString();
    setTimeout(() => resolve({ id }), 700);
  });
}

// ---- Notification helpers ----
async function tryWebNotify({ title, body, url }) {
  if (!("Notification" in window)) throw new Error("Notifications not supported");
  if (Notification.permission === "default") {
    await Notification.requestPermission();
  }
  if (Notification.permission !== "granted") throw new Error("Permission denied");
  const n = new Notification(title || "Notification", { body: body || "", icon: undefined });
  if (url) {
    n.onclick = () => window.open(url, "_blank");
  }
}

// ---- Main App ----
export default function App() {
  const { toasts, add } = useToasts();
  const [authStep, setAuthStep] = useState("idle"); // idle | password | otp | done
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [otp, setOtp] = useState("");
  const [loading, setLoading] = useState(false);
  const [sessionToken, setSessionToken] = useState(null);

  // Ticket state
  const [ticket, setTicket] = useState({ subject: "", category: "Billing", priority: "Normal", description: "" });
  const [ticketId, setTicketId] = useState("");

  // Notification builder
  const [notif, setNotif] = useState({ title: "Welcome to FinEdge", body: "Your virtual card is ready.", url: "", delay: 0 });

  useEffect(() => {
    setAuthStep("password");
  }, []);

  const onPasswordSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await fakeLogin(email, password);
      await fakeSendOtp(email);
      add("Password OK", "We sent a 6-digit code (demo: 123456)");
      setAuthStep("otp");
    } catch (e) {
      add("Login failed", e.message);
    } finally {
      setLoading(false);
    }
  };

  const onOtpSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const res = await fakeVerifyOtp(otp);
      setSessionToken(res.token);
      setAuthStep("done");
      add("Welcome back ðŸ‘‹", "2FA successful");
    } catch (e) {
      add("Invalid code", e.message);
    } finally {
      setLoading(false);
    }
  };

  const submitTicket = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const res = await fakeCreateTicket(ticket);
      setTicketId(res.id);
      add("Ticket created", ID #${res.id});
      setTicket({ subject: "", category: "Billing", priority: "Normal", description: "" });
    } finally {
      setLoading(false);
    }
  };

  const sendNotification = async () => {
    try {
      if (notif.delay > 0) {
        add("Scheduled", Will send in ${notif.delay}s);
        setTimeout(() => {
          tryWebNotify(notif).catch(() => add("In-app notice", notif.body || "(no body)"));
        }, notif.delay * 1000);
      } else {
        await tryWebNotify(notif);
      }
    } catch (e) {
      // Fall back to in-app toast if notifications are not supported or blocked
      add(notif.title || "Notification", notif.body || "(no body)");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#f7f7fb] to-white text-black">
      <Toasts toasts={toasts} />

      {/* Nav */}
      <header className="sticky top-0 z-50 border-b border-black/5 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60">
        <div className="mx-auto flex max-w-7xl items-center justify-between px-4 py-3 md:px-8">
          <div className="flex items-center gap-2">
            <div className="grid h-9 w-9 place-items-center rounded-2xl bg-black text-white">
              <Sparkles size={18} />
            </div>
            <span className="text-lg font-semibold">FinEdge</span>
          </div>
          <nav className="hidden items-center gap-6 md:flex">
            <a className="text-sm text-black/70 hover:text-black" href="#features">Features</a>
            <a className="text-sm text-black/70 hover:text-black" href="#security">Security</a>
            <a className="text-sm text-black/70 hover:text-black" href="#support">Support</a>
            <a className="text-sm text-black/70 hover:text-black" href="#notifications">Notifications</a>
          </nav>
          <div className="flex items-center gap-2">
            <Button className="bg-black text-white hover:shadow-lg" onClick={() => window.scrollTo({ top: document.body.scrollHeight, behavior: "smooth" })}>
              <LogIn size={16} /> Sign in
            </Button>
          </div>
        </div>
      </header>

      {/* Hero */}
      <section className="mx-auto grid max-w-7xl grid-cols-1 items-center gap-10 px-4 py-12 md:grid-cols-2 md:py-20 md:px-8">
        <div>
          <motion.h1
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="text-4xl font-extrabold leading-tight tracking-tight md:text-5xl"
          >
            Modern corporate cards & spend management
          </motion.h1>
          <p className="mt-4 max-w-xl text-lg text-black/70">
            Issue cards, control budgets, and close the books 2x faster. Built-in 2FA, raise-a-ticket support, and custom push notifications.
          </p>
          <div className="mt-6 flex flex-wrap items-center gap-3">
            <Button className="bg-black text-white">
              Get started <ArrowRight size={16} />
            </Button>
            <Button className="bg-white">Request a demo</Button>
          </div>
          <div className="mt-6 flex items-center gap-4 text-sm text-black/60">
            <div className="flex items-center gap-2"><ShieldCheck size={16} /> PCI-aware demo</div>
            <div className="flex items-center gap-2"><Building2 size={16} /> Finance-friendly</div>
            <div className="flex items-center gap-2"><CreditCard size={16} /> Virtual & physical cards</div>
          </div>
        </div>
        <Card className="relative overflow-hidden">
          <div className="absolute -left-20 -top-20 h-72 w-72 rounded-full bg-gradient-to-br from-black/10 to-transparent blur-3xl" />
          <div className="absolute -bottom-20 -right-20 h-72 w-72 rounded-full bg-gradient-to-tr from-black/10 to-transparent blur-3xl" />
          <div className="relative">
            <h3 className="mb-3 text-lg font-semibold">Quick sign-in (with 2FA)</h3>
            {authStep === "password" && (
              <form onSubmit={onPasswordSubmit} className="grid gap-3">
                <Input placeholder="Email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
                <Input placeholder="Password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
                <Button className="bg-black text-white disabled:opacity-60" disabled={loading}>
                  {loading ? <><Loader2 className="animate-spin" size={16} /> Verifying...</> : <>Continue <ArrowRight size={16} /></>}
                </Button>
                <p className="text-xs text-black/50">
                  Demo creds: <span className="font-mono">demo@company.com</span> / <span className="font-mono">demo123</span>
                </p>
              </form>
            )}

            {authStep === "otp" && (
              <form onSubmit={onOtpSubmit} className="grid gap-3">
                <div className="text-sm text-black/70">Enter the 6â€‘digit code from your authenticator / inbox</div>
                <Input placeholder="One-time code" inputMode="numeric" value={otp} onChange={(e) => setOtp(e.target.value)} required />
                <Button className="bg-black text-white disabled:opacity-60" disabled={loading}>
                  {loading ? <><Loader2 className="animate-spin" size={16} /> Checking...</> : <>Verify & Sign in</>}
                </Button>
                <p className="text-xs text-black/50">Demo code: <span className="font-mono">123456</span></p>
              </form>
            )}

            {authStep === "done" && (
              <div className="grid place-items-center gap-2 py-6 text-center">
                <CheckCircle2 className="text-emerald-600" size={32} />
                <div className="font-medium">Signed in with 2FA</div>
                <div className="text-sm text-black/60">Session token: {sessionToken}</div>
              </div>
            )}
          </div>
        </Card>
      </section>

      {/* Features */}
      <section id="features" className="mx-auto max-w-7xl px-4 py-12 md:px-8">
        <div className="grid gap-6 md:grid-cols-3">
          <Card>
            <div className="flex items-center gap-2"><ShieldCheck size={18} /> <div className="font-semibold">2-Factor Authentication</div></div>
            <p className="mt-2 text-sm text-black/70">
              Add a second factor to every sign-in. This demo shows password â†’ OTP. Swap in TOTP, SMS, Email, or push approvals on the backend.
            </p>
          </Card>
          <Card>
            <div className="flex items-center gap-2"><MessagesSquare size={18} /> <div className="font-semibold">Raise a Support Ticket</div></div>
            <p className="mt-2 text-sm text-black/70">
              Route issues to finance or IT. Users get an instant ticket ID and in-app status notifications.
            </p>
          </Card>
          <Card>
            <div className="flex items-center gap-2"><BellRing size={18} /> <div className="font-semibold">Custom Push Notifications</div></div>
            <p className="mt-2 text-sm text-black/70">
              Build & schedule messages. Uses Web Notifications when permitted, with graceful in-app fallback.
            </p>
          </Card>
        </div>
      </section>

      {/* Security & Support */}
      <section id="security" className="mx-auto max-w-7xl px-4 py-12 md:px-8">
        <div className="grid gap-6 md:grid-cols-2">
          <Card>
            <h3 className="mb-2 text-lg font-semibold">Security controls</h3>
            <ul className="list-disc space-y-1 pl-5 text-sm text-black/70">
              <li>Step-up auth for sensitive actions</li>
              <li>Per-device session limits</li>
              <li>Role-based access management</li>
              <li>Audit trails for approvals</li>
            </ul>
          </Card>
          <Card id="support">
            <h3 className="mb-2 text-lg font-semibold">Raise a ticket</h3>
            <form onSubmit={submitTicket} className="grid gap-3">
              <Input placeholder="Subject" value={ticket.subject} onChange={(e) => setTicket({ ...ticket, subject: e.target.value })} required />
              <div className="grid grid-cols-1 gap-3 md:grid-cols-3">
                <select
                  className="rounded-2xl border border-black/10 bg-white px-4 py-2"
                  value={ticket.category}
                  onChange={(e) => setTicket({ ...ticket, category: e.target.value })}
                >
                  <option>Billing</option>
                  <option>Cards</option>
                  <option>Expenses</option>
                  <option>Integrations</option>
                  <option>Security</option>
                </select>
                <select
                  className="rounded-2xl border border-black/10 bg-white px-4 py-2"
                  value={ticket.priority}
                  onChange={(e) => setTicket({ ...ticket, priority: e.target.value })}
                >
                  <option>Low</option>
                  <option>Normal</option>
                  <option>High</option>
                  <option>Urgent</option>
                </select>
                <Input placeholder="Your email" type="email" required />
              </div>
              <Textarea rows={4} placeholder="Describe the issueâ€¦" value={ticket.description} onChange={(e) => setTicket({ ...ticket, description: e.target.value })} />
              <Button className="bg-black text-white disabled:opacity-60" disabled={loading}>
                {loading ? <><Loader2 className="animate-spin" size={16} /> Creatingâ€¦</> : "Create ticket"}
              </Button>
              {ticketId && (
                <div className="text-sm text-emerald-700">Ticket created successfully. Your ID is <span className="font-mono">#{ticketId}</span>.</div>
              )}
            </form>
          </Card>
        </div>
      </section>

      {/* Notifications */}
      <section id="notifications" className="mx-auto max-w-7xl px-4 py-12 md:px-8">
        <Card>
          <div className="mb-3 flex items-center justify-between">
            <h3 className="text-lg font-semibold">Custom push notifications</h3>
            <div className="text-xs text-black/50">Uses Web Notifications API with fallback</div>
          </div>
          <div className="grid gap-3 md:grid-cols-4">
            <div className="md:col-span-2">
              <Input placeholder="Title" value={notif.title} onChange={(e) => setNotif({ ...notif, title: e.target.value })} />
              <Textarea className="mt-3" rows={5} placeholder="Message body" value={notif.body} onChange={(e) => setNotif({ ...notif, body: e.target.value })} />
              <div className="mt-3 grid grid-cols-2 gap-3">
                <Input placeholder="Click-through URL (optional)" value={notif.url} onChange={(e) => setNotif({ ...notif, url: e.target.value })} />
                <Input type="number" min={0} placeholder="Delay (sec)" value={notif.delay} onChange={(e) => setNotif({ ...notif, delay: Number(e.target.value) })} />
              </div>
              <div className="mt-4 flex gap-3">
                <Button className="bg-black text-white" onClick={sendNotification}><BellRing size={16} /> Send</Button>
                <Button onClick={() => setNotif({ title: "Receipt uploaded", body: "We matched it to your Uber trip.", url: "", delay: 0 })}>Use sample</Button>
              </div>
            </div>
            <div className="md:col-span-2">
              <div className="rounded-2xl border border-dashed border-black/10 p-4 text-sm text-black/70">
                <div className="mb-2 font-medium">Preview</div>
                <div className="rounded-xl border border-black/10 bg-white p-4 shadow-sm">
                  <div className="font-medium">{notif.title || "(no title)"}</div>
                  <div className="text-black/60">{notif.body || "(no body)"}</div>
                  {notif.url && (
                    <a className="mt-1 inline-block text-xs text-blue-600 underline" href={notif.url} target="_blank" rel="noreferrer">
                      {notif.url}
                    </a>
                  )}
                </div>
                <div className="mt-3 text-xs text-black/50">If the browser blocks notifications, we fall back to in-app toasts (top-right).</div>
              </div>
            </div>
          </div>
        </Card>
      </section>

      {/* Footer */}
      <footer className="mt-16 border-t border-black/5">
        <div className="mx-auto max-w-7xl px-4 py-10 md:px-8">
          <div className="grid gap-6 md:grid-cols-3">
            <div>
              <div className="flex items-center gap-2">
                <div className="grid h-8 w-8 place-items-center rounded-xl bg-black text-white"><Sparkles size={16} /></div>
                <div className="font-semibold">FinEdge</div>
              </div>
              <p className="mt-3 text-sm text-black/60">A modern finance platform demo. Not affiliated with Brex.</p>
            </div>
            <div className="text-sm text-black/60">
              <div className="font-medium text-black">Platform</div>
              <ul className="mt-2 space-y-1">
                <li><a href="#features" className="hover:text-black">Cards</a></li>
                <li><a href="#security" className="hover:text-black">Security</a></li>
                <li><a href="#support" className="hover:text-black">Support</a></li>
                <li><a href="#notifications" className="hover:text-black">Notifications</a></li>
              </ul>
            </div>
            <div className="text-sm text-black/60">
              <div className="font-medium text-black">Legal</div>
              <ul className="mt-2 space-y-1">
                <li>Privacy</li>
                <li>Terms</li>
                <li>Security</li>
              </ul>
            </div>
          </div>
          <div className="mt-8 text-xs text-black/50">Â© {new Date().getFullYear()} FinEdge Demo</div>
        </div>
      </footer>
    </div>
  );
}
